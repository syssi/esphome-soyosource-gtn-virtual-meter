# ==========================================================
# This configuration is for silent Soyosource inverters which doesn't respond to status requests. 
# Therefore no status informations like the operation mode are available and cannot be monitored. 
# The monitoring of the operation mode is disabled.
# ==========================================================
# The instantaneous power is extracted from a JSON response periodically retrieved via HTTP from a ESP Pulse Counter
# but could be also any Shelly PM etc.
# ==========================================================
# The maximum power output and select entities are limited to 600W in order to not violate the regulations in germany.
# ==========================================================


substitutions:
  name: soyosource-gtn-virtual-meter
  device_description: "Monitor a Soyosource GTN and control the power output on demand both via RS485"
  external_components_source: github://syssi/esphome-soyosource-gtn-virtual-meter@main
  tx_pin: GPIO1
  rx_pin: GPIO3
  http_get_powermeter_hostname: "stromzaehler-1" #or hostname or IP of your counter
  http_get_powermeter: "http://${http_get_powermeter_hostname}/sensor/energieverbrauch"

esphome:
  name: ${name}
  comment: ${device_description}
  project:
    name: "syssi.esphome-soyosource-gtn-virtual-meter"
    version: 1.1.0
  libraries:
    - ESP8266WiFi

esp8266:
  board: d1_mini_pro

external_components:
  - source: ${external_components_source}
    refresh: 0s


wifi:
  networks:
    - ssid: !secret wifi_ssid
      password: !secret wifi_password
  ap:
    ssid: "HotSpot-Soyo"
    password: "12345678"
    ap_timeout: 1min
captive_portal:
  
#ota support
ota:

# use webserver
web_server:
  port: 80
  ota: true
  version: 2

  
logger:
  baud_rate: "0"
  level: INFO

  
uart:
  baud_rate: 4800
  tx_pin: ${tx_pin}
  rx_pin: ${rx_pin}


http_request:
  useragent: esphome/device
  timeout: 5s

soyosource_modbus:
  # Optional settings
  #
  # The name is used as prefix for some log messages and should
  # help to distinguish between different instances/devices
  name: soyo_master
  flow_control_pin: GPIO0  # for flow control D3 /GPIO0 PIN on Wemos D1 Mini Pro and MAX-485 (no automatic flow control)

soyosource_inverter:

soyosource_virtual_meter:
  # The state of this sensor (instantaneous power in watt) is used as source
  power_id: powermeter

  # Optional settings
  power_sensor_inactivity_timeout: 20s
  # power_demand_calculation: NEGATIVE_MEASUREMENTS_REQUIRED
  min_power_demand: 0
  max_power_demand: 600
  # Split/distribute the power demand if you have multiple inverters attached to the same RS485 bus
  power_demand_divider: 1
  # A positive buffer value (10) tries to avoid exporting power to the grid (demand - 10 watts)
  # A negative buffer value (-10) exports power to the grid (demand + 10 watts)
  buffer: 10
  # The operation_mode_id sensor is expected here. Passing the operation_mode won't work
  # The state is used to suspend the limiter if the operation mode of the inverter isn't 0x0 (normal)
  # operation_mode_id: operation_mode_id

  # The update interval is important and defaults to 3 seconds. If the demand is sent too frequently
  # or rarely the interverter stops. TODO: Identify and validate the lower and upper update limit
  update_interval: 3s

binary_sensor:
  - platform: soyosource_inverter
    fan_running:
      name: "${name} fan running"


sensor:

  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"


  - platform: soyosource_virtual_meter
    power_demand:
      name: "${name} power demand"
      icon: mdi:switch

  - platform: soyosource_inverter
    operation_mode_id:
      name: "${name} operation mode id"
      id: operation_mode_id
    battery_voltage:
      name: "${name} battery voltage"
    battery_current:
      name: "${name} battery current"
    battery_power:
      name: "${name} battery power"
    ac_voltage:
      name: "${name} ac voltage"
    ac_frequency:
      name: "${name} ac frequency"
    temperature:
      name: "${name} temperature"
   
  # import smartmeter reading from other ESP SmartMeter
  - id: powermeter
    platform: template
    name: "${name} StromZÃ¤hler"
    lambda: |-
      if (std::isnan(id(powermeter).state)) {
        return 0.0;
      } else {
        return id(powermeter).state;
      }
    unit_of_measurement: W
    device_class: "power"
    accuracy_decimals: 2
    update_interval: 5s

# read data via http request
interval:
  - interval: 5s
    then:
      - lambda: |-
          if (WiFi.status() == WL_CONNECTED ) {
            WiFiClient wifi;
            HTTPClient http;
            float value = 0.0;
            wifi.setTimeout(1);
            http.setFollowRedirects(HTTPC_FORCE_FOLLOW_REDIRECTS);
            http.useHTTP10(true); // useHTTP10(true) when you use getStream(), or deserializeJson() will return InvalidInput.
            http.begin(wifi,"${http_get_powermeter}");
            http.setTimeout(1000); //max 1 sec
            int httpCode = http.GET();

            ESP_LOGI("main", "Value from httpCode %d", httpCode);
            if( httpCode == 200 ){
              StaticJsonDocument<1024> doc;
              DeserializationError error = deserializeJson(doc, http.getStream());
              if (error) {
                http.end();
                Serial.print("deserializeJson() failed: ");
                Serial.println(error.c_str());
                return;
              }
              value = doc["value"].as<float>();
            }
            http.end();

            id(powermeter).publish_state(value);
            ESP_LOGI("main", "Value from Remote Counter %0.1f", value);
          } else {
            id(powermeter).publish_state(0.0);
          }

text_sensor:
  - platform: soyosource_inverter
    operation_mode:
      name: "${name} operation mode"
  - platform: soyosource_virtual_meter
    operation_mode:
      name: "${name} operation mode"

number:
  - platform: soyosource_virtual_meter
    manual_power_demand:
      name: "${name} manual power demand"
      max_value: 600
    max_power_demand:
      name: "${name} max power demand"
      initial_value: 600
      max_value: 600
      restore_value: true

switch:
  - platform: soyosource_virtual_meter
    manual_mode:
      name: "${name} manual mode"
      restore_mode: RESTORE_DEFAULT_ON
    emergency_power_off:
      name: "${name} emergency power off"
      restore_mode: RESTORE_DEFAULT_OFF
